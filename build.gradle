// vim: set ft=groovy ts=4 sw=4:
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// *              C E D A R
// *          S O L U T I O N S       "Software done right."
// *           S O F T W A R E
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Copyright (c) 2013 Kenneth J. Pronovici.
// * All rights reserved.
// *
// * This program is free software; you can redistribute it and/or
// * modify it under the terms of the Apache License, Version 2.0.
// * See LICENSE for more information about the licensing terms.
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Author   : Kenneth J. Pronovici <pronovic@ieee.org>
// * Language : Gradle (>= 1.7)
// * Project  : Secret Santa Exchange
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// See: http://stackoverflow.com/questions/1163173/why-use-gradle-instead-of-ant-or-maven

buildscript {
    repositories {
        mavenLocal()   // Local Maven repository
        mavenCentral() // Maven Central repository
        maven { url "http://maven.cedar-common.googlecode.com/hg/maven/" }   // Cedar Common code
    }

    dependencies {
        classpath "com.googlecode.cedar-common:cedar-build:0.8.5"
    }
} 

apply plugin: "projectGwt"
apply plugin: "projectEclipse"
apply plugin: "cedarBuild"
apply plugin: "cedarCopyright"
apply plugin: "cedarJavadoc"

cedarProperties.loadStandardProperties()

def gwtConfig = file(config_mercurialLabelResources).canonicalPath
cedarProperties.loadGwtProperties(gwtConfig, [ "system_applicationName", "system_versionNumber", "system_releaseDate", ])

compileJava.options.fork(memoryMaximumSize: config_javaCompilerMemory)
sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

cedarLabel {
    enabled = config_mercurialLabelEnabled
    projectName = system_applicationName
    projectVersion = "${system_versionNumber} (${system_releaseDate})"
    repositories = [ projectDir, ]
    mercurialPath = config_mercurialPath
}

cedarCopyright {
    licensePattern = '^.*LICENSE$'
    sourcePatterns = [ '^.*\\.java$', '^.*\\.rb$', '^.*\\.feature$', '^.*\\.gradle$', '^.*build.xml$', ]
    repositories = [ projectDir, ]
    mercurialPath = config_mercurialPath
}

cedarJavadoc {
    title = "${system_applicationName} ${system_versionNumber}"
    output = "${project.docsDir}/javadoc"
    classpath = { project.configurations.runtime }
    srcDirs = { sourceSets.main.java.srcDirs }
    subpackages = [ "com", ]
}

projectEclipse {
    sourceFolders = [ "resources", "src", "test", "suites", ]  // in desired order
    suitesSourceDir = "gradle/src/suites"
    settingsSourceDir = "gradle/eclipse/settings"
    externalToolBuildersSourceDir = "gradle/eclipse/externalToolBuilders"    
}

projectGwt {
    appModuleName = config_appModuleName
    appEntryPoint = config_appEntryPoint
    appStartupUrl = config_appStartupUrl

    gwtCompilerMemory = config_gwtCompilerMemory

    devmodeServerMemory = config_devmodeServerMemory
    devmodeCodeserverPort = config_devmodeCodeserverPort
    devmodeServerPort = config_devmodeServerPort

    rubyPath = file("${config_rubyBinDir}/${config_rubyInterpreter}").canonicalPath
    cucumberPath = file("${config_rubyBinDir}/${config_rubyCucumberProgram}").canonicalPath
    serverWait = config_serverWait

    appEngineVersion = config_appEngineVersion
}

repositories {
    mavenLocal()   // Local Maven repository
    mavenCentral() // Maven Central repository
    maven { url "http://maven.objectify-appengine.googlecode.com/git/" }      // Objectify 3.x
    maven { url "http://repository.springsource.com/maven/bundles/external" } // Spring Source bundles
    maven { url "http://maven.cedar-common.googlecode.com/hg/maven/" }        // Cedar Common code
}

task generateJavadoc(dependsOn: jdoc) << {
    copyJavadocToMercurial(config_mercurialJavadocProject, project, { name -> name })
}

sourceSets {
    main {
        java { srcDirs = [ "src" ] }
        resources { srcDirs = [ "src", "resources", ] }
    }

    test {
        java { srcDirs = [ "test", "gradle/src/suites", ] }
        resources { srcDirs = [ "test", "gradle/src/suites", "gradle/resources", ] }
        runtimeClasspath += files(sourceSets.main.java.srcDirs)
        runtimeClasspath += files(sourceSets.main.resources.srcDirs)
        runtimeClasspath += files(sourceSets.test.java.srcDirs)
    }

    devmode {
    }
}

dependencies {
    gaeSdk "com.google.appengine:appengine-java-sdk:${config_appEngineVersion}"

    compile "com.google.gwt:gwt-servlet:${config_gwtVersion}"
    compile fileTree(dir: project.convention.plugins.projectGwt.getAppEngineSdkDir(), includes: [ "lib/user/**/*.jar", ])
    compile "com.googlecode.cedar-common:cedar-common-util:${config_cedarCommonVersion}"
    compile "com.googlecode.cedar-common:cedar-common-gae:${config_cedarCommonVersion}"
    compile("com.googlecode.cedar-common:cedar-common-gwt:${config_cedarCommonVersion}") {
        exclude module: "com.google.gwt" // proper version is provided runtime, below
    }

    testCompile "com.googlecode.cedar-common:cpsuite:1.2.6" 
    testCompile "com.googlecode.cedar-common:cedar-common-testutil:${config_cedarCommonVersion}"
    testCompile "com.googlecode.cedar-common:cedar-common-gwttestutil:${config_cedarCommonVersion}"
    testCompile "com.googlecode.cedar-common:cedar-common-gaetestutil:${config_cedarCommonVersion}"

    runtime("org.apache.xalan:com.springsource.org.apache.xalan:2.7.1") { transitive = false }
    runtime("org.apache.xerces:com.springsource.org.apache.xerces:2.9.1") { transitive = false }
    runtime "org.aspectj:aspectjrt:1.6.12"

    providedRuntime "com.google.gwt:gwt-dev:${config_gwtVersion}"
    providedRuntime "com.google.gwt:gwt-user:${config_gwtVersion}"

    devmodeRuntime fileTree(dir: project.convention.plugins.projectGwt.getAppEngineSdkDir(), includes: [ "lib/appengine-tools-api.jar", ])
}

configurations {
    // We get the AppEngine jars directly from the SDK zip, to ease our burden with Eclipse
    all*.exclude group: "com.google.appengine", module: "appengine-api-1.0-sdk"

    // These transitive dependencies are not required for the application to work properly
    all*.exclude group: "antlr", module: "antlr"
    all*.exclude group: "asm", module: "asm"
    all*.exclude group: "commons-chain", module: "commons-chain"
    all*.exclude group: "commons-codec", module: "commons-codec"
    all*.exclude group: "commons-codec", module: "commons-codec"
    all*.exclude group: "commons-digester", module: "commons-digester"
    all*.exclude group: "commons-validator", module: "commons-validator"
    all*.exclude group: "dom4j", module: "dom4j"
    all*.exclude group: "javax.activation", module: "activation"
    all*.exclude group: "javax.servlet", module: "servlet-api"
    all*.exclude group: "javax.transaction", module: "transaction-api"
    all*.exclude group: "org.apache.struts"
    all*.exclude group: "org.json", module: "json"
    all*.exclude group: "org.sonatype.sisu.inject", module: "cglib"
    all*.exclude group: "org.springframework", module: "spring-support"
    all*.exclude group: "sslext", module: "sslext"
}

